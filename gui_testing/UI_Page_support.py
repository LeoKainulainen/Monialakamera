#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.21
#  in conjunction with Tcl version 8.6
#    Mar 08, 2019 07:29:48 AM EET  platform: Linux


from pathlib import Path
import os
import sys
import os

import time
import cv2
import numpy as np

# For Tkinter Image Display

from PIL import Image
from PIL import ImageTk

from UI_timing_functions import Clock
from UI_splicer_functions import Strip
from shelve_explorer import ShelveExplorer

from tkintertable import TableCanvas, TableModel

sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir)))
# from LinescanRecord import UI_IDS_functions as UI_IDS_f

# from LinescanRecord.UI_IDS_functions import IDSSettings, IDSPreview, IDSPreview_standalone
# from LinescanRecord.UI_IDS_functions import IDSPreview_stop

#Linescann
from LinescanRecord.UI_IDS_functions3 import IDSSettings, IDSPreview_standalone, startCamera
# from LinescanRecord.UI_IDS_functions3 import IDSPreview_stop
from LinescanRecord.UI_IDS_functions3 import IDS



from pyueye import ueye
from IDSCapture.pyueye_camera import Camera
from IDSCapture.pyueye_utils import FrameThread, ImageBuffer, ImageData
from multiprocessing import Pipe


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global StripScrollbarNumFrames
    StripScrollbarNumFrames = tk.DoubleVar()
    global CaptureSensitivityScale
    CaptureSensitivityScale = tk.DoubleVar()
    global FinishDirection
    FinishDirection = tk.StringVar()
    global che88
    che88 = tk.StringVar()
    global IDSFramerateScale
    IDSFramerateScale = tk.DoubleVar()

def k5FramesGoBack():
    print('UI_Page_support.k5FramesGoBack')
    sys.stdout.flush()

def k5FramesGoForward():
    print('UI_Page_support.k5FramesGoForward')
    sys.stdout.flush()

def CapturePauseResume():
    print('UI_Page_support.CapturePauseResume')
    sys.stdout.flush()

def FinishDirectionLtoR():
    print('UI_Page_support.FinishDirectionLtoR')
    sys.stdout.flush()

def FinishDirectionRtoL():
    print('UI_Page_support.FinishDirectionRtoL')
    sys.stdout.flush()


def IDSStartPreview():
    print('UI_Page_support.IDSStartPreview')
    sys.stdout.flush()
    global PreviewStatus
    PreviewStatus = False
    startCamera()
    IDS(w).IDSPreview2()
    cv2.imshow("SimpleLive_Python_uEye_OpenCV", frame)                                
    # IDSCapturePreview()

def IDSCapturePreview():
    max_frames = 500
    global PreviewStatus
    if PreviewStatus != True:
        # Begin IDS Video Capture and display via hstack

        parent_conn, child_conn = Pipe()
        cpt = 0
        # max_frames = int(input("How many pictures would you like?: "))
        # max_frames = 500

        # camera class to simplify uEye API access
        cam = Camera()
        cam.init()
        cam.set_colormode(ueye.IS_CM_BGR8_PACKED)
        cam.set_aoi(0, 0, 0, 2, "centered")

        cam.set_full_auto()

        cam.set_auto_pixelclock_framerate(420,500)



        cam.alloc()
        cam.capture_video()


        # a thread that waits for new images and processes all connected views
        thread = FrameThread(cam, child_conn)

        thread.start()
        # global PreviewStatus
        PreviewStatus = True
        print("Start camera",PreviewStatus)

        # keep repeating this
    elif PreviewStatus == True:

        slices = []
        slices.clear()
        while cpt < max_frames:
            img = parent_conn.recv()



            slices.append(img)

            # cv.imwrite('train_file/image%04i.jpg' %cpt, img)

            #print(input_q.qsize())

            time.sleep(5)
            cpt += 1


        img = np.vstack(slices)

        img = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)
        cv2.imshow("Image", img)

        cv2.waitKey(200)
        print("image captured")
        print("Capture",PreviewStatus)

        # Set Tkinter Preview canvas

        # w.IDSPreviewCanvas2.create_image(image=img)

        IDSCapturePreview()
        # thread.stop()



def IDSStopPreview():
    print('UI_Page_support.IDSStopPreview')
    sys.stdout.flush()
    # IDSPreview_stop()
    IDS(w).IDSPreview_stop()

    PreviewStatus = False
    print("Strop Preview",PreviewStatus)
    # -------------------------------
    # thread.stop()
    # thread.join()

    # cam.stop_video()
    # cam.exit()

def LoadParticipantsCSV():
    print('UI_Page_support.LoadParticipantsCSV')
    sys.stdout.flush()
    CSVfilename = tk.filedialog.askopenfilename(defaultextension='.csv',
                                                  filetypes=[("CSV files","*.csv")] )
    ShelveSaveDir = tk.filedialog.askdirectory()

def SaveResultsCSV():
    print('UI_Page_support.SaveResultsCSV')
    sys.stdout.flush()
    # SaveResultsfilename = filedialog.asksaveasfilename(parent=parent,defaultextension='.csv',
                                                #   filetypes=[("CSV files","*.csv")] )
    SaveResultsfilename = tk.filedialog.asksaveasfilename(defaultextension='.csv',
                                                  filetypes=[("CSV files","*.csv")] )


def StripDetectYoloV3():
    print('UI_Page_support.StripDetectYoloV3')
    sys.stdout.flush()

def StripGoLeft():
    print('UI_Page_support.StripGoLeft')
    sys.stdout.flush()
    w.ShelveExplorerTab.goLeft()

def StripGoRight():
    print('UI_Page_support.StripGoRight')
    sys.stdout.flush()
    w.ShelveExplorerTab.goRight()

def InitializeCanvas():
    w.ShelveExplorerTab.explore()



def deleteLines():
    w.ShelveExplorerTab.deleteLines()

def tableFiller():
    
    w.ShelveExplorerTab.tableFiller()

sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir)))
from LinescanRecord import splicer_shelve

def StripScrollScale(*args):
    print('UI_Page_support.StripScrollScale')
    sys.stdout.flush()
    val = int(args[0])
    # StripScale = Strip(w)
    # stripPosition = int(args[0])
    # print(type(stripPosition), stripPosition)
    # stripPositionSplice = stripPosition + 10
    # im = splicer_shelve.join_splices_from_shelve(stripPositionSplice-10, stripPositionSplice)
    w.Strip.UpdateStripCanvas(val)
    # while True:
    #     cv2.imshow('frame', im)
    #     key = cv2.waitKey(0) & 0xff
    #     if key == 27:
    #         print("Update StripCanvas1")
    #         break

def StripShowNormal():
    print('UI_Page_support.StripShowNormal')
    sys.stdout.flush()

def TimerStart():
    print('UI_Page_support.TimerStart')
    sys.stdout.flush()
    # Timerstarted = 1
    TimerTime = Clock(w)
    TimerTime.TimerStart()
    TimerTime.PreviewCanvasTest()
    # TimerTime.TimerTick()

def TimerStop():
    print('UI_Page_support.TimerStop')
    sys.stdout.flush()
    Clock(w).TimerStop()
    StripScrollScale(1)
    print("testing")

def OneTimerStartStop():
    TimerTime = Clock(w)
    TimerTime.TimerStart()

def motion(event):
    w.ShelveExplorerTab.motion(event)

def leftClick(event):
    w.ShelveExplorerTab.leftClick(event)



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # Initialize classes

    # Clock

    Clock(w).Ticking()

    # Strip and scrolling
    w.Strip = Strip(w)

    # Explorer
    w.ShelveExplorerTab = ShelveExplorer(w)

    

    # w.ExplorerResultsLabelframe1.data2 = {'rec1': {'BIB': "1", 'Name': "Jou", 'Time': "100"}
    
    # } 

    # w.table = 
    # table = TableCanvas(w.ExplorerResultsLabelframe1, data=data2)
    # Bind table variable to w.ExplorerResultsLabelframe1 -object
    table = TableCanvas(w.ExplorerResultsLabelframe1,rowheaderwidth=30, cellwidth=110, rowheight=20, rows=0, cols=0)
    w.ExplorerResultsLabelframe1.table = table
    w.ExplorerResultsLabelframe1.table.createTableFrame()
    w.ExplorerResultsLabelframe1.table.addColumn(newname="BIB")
    w.ExplorerResultsLabelframe1.table.addColumn(newname="Name")
    w.ExplorerResultsLabelframe1.table.addColumn(newname="Time")
    w.ExplorerResultsLabelframe1.table.resizeColumn(0,10)
    w.ExplorerResultsLabelframe1.table.resizeColumn(2,110)

    # w.ExplorerResultsLabelframe1.table.autoResizeColumns()
    w.ExplorerResultsLabelframe1.table.show()
    

    # ShelveExplorer(w).explore()
    # ShelveExplorer(w).leftClick()
    
    IDS(w)
    # Strip(w)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import UI_Page
    UI_Page.vp_start_gui()
